import logging
import json
import os
import openpyxl
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATA_FILE = "diary.json"
EXCEL_FILE = "diary.xlsx"

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def save_to_excel(data):
    if not os.path.exists(EXCEL_FILE):
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–°–∏—Ç—É–∞—Ü–∏—è", "–§–∞–∫—Ç—ã", "–≠–º–æ—Ü–∏–∏"])
    else:
        workbook = openpyxl.load_workbook(EXCEL_FILE)
        sheet = workbook.active

    for user_id, entries in data.items():
        for entry in entries:
            sheet.append([entry.get("–¥–∞—Ç–∞", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), user_id, entry["—Å–∏—Ç—É–∞—Ü–∏—è"], entry["—Ñ–∞–∫—Ç—ã"], entry["—ç–º–æ—Ü–∏–∏"]])

    workbook.save(EXCEL_FILE)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?")

async def export_data(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º"""
    if os.path.exists(EXCEL_FILE):
        await update.message.reply_document(document=open(EXCEL_FILE, "rb"), filename="diary.xlsx", caption="–í–æ—Ç —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ üòä")
    else:
        await update.message.reply_text("–§–∞–π–ª –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø–∏—Å–∏!")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_data))  
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
