import os
import logging
import json
import openai
import openpyxl
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI
openai.api_key = OPENAI_API_KEY

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
EXCEL_FILE = "diary.xlsx"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ ChatGPT
def analyze_text(text):
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç: {text}
    –û–ø—Ä–µ–¥–µ–ª–∏:
    1. –ò—Å–∫–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –º–Ω–µ –º–æ–π –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Ç–∏–∫.
    2. –ú–æ–∏ —ç–º–æ—Ü–∏–∏.
    3. –§–∞–∫—Ç—ã.
    4. –ù–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
    5. –í–∞—Ä–∏–∞–Ω—Ç—ã, –∫–∞–∫ —è –º–æ–≥—É –æ–±–µ–∑–æ—Ä—É–∂–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–∞.

    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {{
        "distortion": "–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–∫–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–∏–∫–∞",
        "comment": "–ö–∞–∫ –º–æ–∂–Ω–æ –æ–±–µ–∑–æ—Ä—É–∂–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–∞"
    }}
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥."}, {"role": "user", "content": prompt}],
        temperature=0.7
    )

    try:
        result = json.loads(response["choices"][0]["message"]["content"])
        return result
    except (KeyError, json.JSONDecodeError):
        return {"distortion": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.", "comment": "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_to_excel(situation, distortion, comment):
    if not os.path.exists(EXCEL_FILE):
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["–°–∏—Ç—É–∞—Ü–∏—è", "–ò—Å–∫–∞–∂–µ–Ω–∏–µ", "–û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ"])
    else:
        workbook = openpyxl.load_workbook(EXCEL_FILE)
        sheet = workbook.active

    sheet.append([situation, distortion, comment])
    workbook.save(EXCEL_FILE)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è —Å–ª—É—á–∏–ª–æ—Å—å (–º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è + –∞–Ω–∞–ª–∏–∑)
async def handle_voice(update: Update, context: CallbackContext):
    user = update.message.from_user
    voice = update.message.voice

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É Telegram
    transcript = voice.transcribe()

    if not transcript:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å ChatGPT
    result = analyze_text(transcript)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫
    save_to_excel(transcript, result["distortion"], result["comment"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(f"–†–∞–∑–±–æ—Ä:\n\n–ò—Å–∫–∞–∂–µ–Ω–∏—è:\n{result['distortion']}\n\n–û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ:\n{result['comment']}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: CallbackContext):
    user_text = update.message.text

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å ChatGPT
    result = analyze_text(user_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫
    save_to_excel(user_text, result["distortion"], result["comment"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(f"–†–∞–∑–±–æ—Ä:\n\n–ò—Å–∫–∞–∂–µ–Ω–∏—è:\n{result['distortion']}\n\n–û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ:\n{result['comment']}")

# –ö–æ–º–∞–Ω–¥–∞ /export (–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞)
async def export_data(update: Update, context: CallbackContext):
    if os.path.exists(EXCEL_FILE):
        await update.message.reply_document(document=open(EXCEL_FILE, "rb"), filename="diary.xlsx", caption="–í–æ—Ç —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ üìñ")
    else:
        await update.message.reply_text("–§–∞–π–ª –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()